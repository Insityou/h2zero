{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.finder;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//                (java-create-finder.templar){\n}{\n}

import java.sql.Connection;{\n}
import java.sql.PreparedStatement;{\n}
import java.sql.ResultSet;{\n}
import java.sql.SQLException;{\n}
import java.sql.Date;{\n}
import java.sql.Clob;{\n}
import java.sql.Timestamp;{\n}
import java.sql.Types;{\n}
import java.util.HashMap;{\n}
import java.util.List;{\n}
import java.util.Enumeration;{\n}
import java.util.ArrayList;{\n}
import java.util.concurrent.ConcurrentHashMap;{\n}
{\n}
import synapticloop.h2zero.base.exception.H2ZeroFinderException;{\n}
import synapticloop.h2zero.base.manager.ConnectionManager;{\n}
{\n}
import org.apache.log4j.Level;{\n}
import org.apache.log4j.Logger;{\n}
{\n}
import {database.package}.model.util.Constants;{\n}
import {database.package}.model.{table.javaClassName};{\n}
{loop table.finders as finder}
	{if fn:notNull[finder.selectClause]}
		import {database.package}.bean.{finder.finderTagName}Bean;{\n}
	{endif}
{endloop}
{\n}

public class {table.javaClassName}Finder {{{\n}
{\t}private static final String BINDER = Constants.{table.upperName}_binder;{\n}{\n}
{\t}private static final Logger LOGGER = Logger.getLogger({table.javaClassName}Finder.class);{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			Is this cacheable?
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{if table.cacheable}
	
	{\t}private static ConcurrentHashMap<String, Boolean> SHOULD_REFRESH_CACHE = new ConcurrentHashMap<String, Boolean>();{\n}
	{\t}private static ConcurrentHashMap<String, List<{table.javaClassName}>> CACHE = new ConcurrentHashMap<String, List<{table.javaClassName}>>();{\n}
{endif}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIRST UP THE FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}private static final String SQL_SELECT_START = "select 
{loop table.fields as field}
	{field.name}
	{if !fieldStatus.last}, {endif}
{endloop}
 from {table.name}";{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDER FIELDS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}


{loop table.fields as field}
	{if field.primary}
		{set field.name as primaryFieldName}
		{set field.javaName as primaryFieldJavaName}
	{endif}
{endloop}

{\t}private static final String SQL_BUILTIN_FIND_BY_PRIMARY_KEY = SQL_SELECT_START + " where {primaryFieldName} = ?";{\n}
{\t}private static final String SQL_BUILTIN_PRIMARY_KEY_EXISTS = "select count(*) from {table.name} where {primaryFieldName} = ?";{\n}
{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDERS FOR THE SELECT CLAUSES AND NORMAL CLAUSES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if fn:null[finder.selectClause]}
		{\t}private static final String SQL_{finder.staticName} = SQL_SELECT_START
		{if fn:notNull[finder.whereClause]} + " {finder.whereClause}"{endif}
		{if fn:notNull[finder.orderBy]} + " order by {finder.orderBy}"{endif};{\n}
	{endif}
	{if fn:notNull[finder.selectClause]}
		{\t}private static final String SQL_{finder.staticName} = "{finder.selectClause}"
		{if fn:notNull[finder.whereClause]} + " {finder.whereClause}"{endif}
		{if fn:notNull[finder.orderBy]} + " order by {finder.orderBy}"{endif};{\n}
	{endif}
{endloop}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE FINDERS FOR THE SELECT CLAUSES CACHES
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if fn:notNull[finder.selectClause]}
		{if finder.hasInFields}
			{\t}private static HashMap<String, String> {finder.name}_statement_cache = new HashMap<String, String>();{\n}
		{endif}
	{endif}
{endloop}

		{\t}private static HashMap<String, String> findAll_limit_statement_cache = new HashMap<String, String>();{\n}
{loop table.finders as finder}
	{if fn:null[finder.selectClause]}
		{\t}private static HashMap<String, String> {finder.name}_limit_statement_cache = new HashMap<String, String>();{\n}
	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND BY PRIMARY KEY
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Find a {table.javaClassName} by its primary key{\n}
{\t} * {\n}
{\t} * @param connection the connection item{\n}
{\t} * @param {primaryFieldJavaName} the primary key{\n}
{\t} * {\n}
{\t} * @return the unique result{\n}
{\t} * {\n}
{\t} * @throws H2ZeroFinderException if one couldn't be found{\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static {table.javaClassName} findByPrimaryKey(Connection connection, Long {primaryFieldJavaName}) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}{table.javaClassName} {table.javaFieldName} = null;{\n}
{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\n}
{\t}{\t}if(null == {primaryFieldJavaName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result as the primary key field [{primaryFieldJavaName}] was null.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);{\n}
{\t}{\t}{\t}preparedStatement.setLong(1, {primaryFieldJavaName});{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}{table.javaFieldName} = uniqueResult(resultSet);{\n}
{\t}{\t}} catch (SQLException sqlex) {{{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(null == {table.javaFieldName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}}{\n}
{\t}{\t}return({table.javaFieldName});{\n}
{\t}}{\n}
{\n}

{\t}public static {table.javaClassName} findByPrimaryKey(Long {primaryFieldJavaName}) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}{table.javaClassName} {table.javaFieldName} = null;{\n}
{\t}{\t}Connection connection = null;{\n}
{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\n}
{\t}{\t}if(null == {primaryFieldJavaName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result as the primary key field [{primaryFieldJavaName}] was null.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_BUILTIN_FIND_BY_PRIMARY_KEY);{\n}
{\t}{\t}{\t}preparedStatement.setLong(1, {primaryFieldJavaName});{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}{table.javaFieldName} = uniqueResult(resultSet);{\n}
{\t}{\t}} catch (SQLException sqlex) {{{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}if(null == {table.javaFieldName}) {{{\n}
{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result the parameters were [{primaryFieldJavaName}:" + {primaryFieldJavaName} + "].");{\n}
{\t}{\t}}{\n}
{\t}{\t}return({table.javaFieldName});{\n}
{\t}}{\n}
{\n}

{\t}public static {table.javaClassName} findByPrimaryKeySilent(Connection connection, Long {primaryFieldJavaName}) {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findByPrimaryKey(connection, {primaryFieldJavaName}));{\n}
{\t}{\t}} catch(H2ZeroFinderException h2zfex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + h2zfex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}public static {table.javaClassName} findByPrimaryKeySilent(Long {primaryFieldJavaName}) {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findByPrimaryKey({primaryFieldJavaName}));{\n}
{\t}{\t}} catch(H2ZeroFinderException h2zfex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + h2zfex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findByPrimaryKeySilent(" + {primaryFieldJavaName} + "): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				FIND ALL
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Find all {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @return a list of all of the {table.javaClassName} objects{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was an error in the SQL statement{\n}
{\t} */{\n}

{\t}public static List<{table.javaClassName}> findAll(Integer limit, Integer offset) throws SQLException {{{\n}

{if table.cacheFindAll}
	{\t}{\t}if(!shouldRefresh("findAll")) {{{\n}
	{\t}{\t}{\t}List<{table.javaClassName}> results = getCachedResults("findAll");{\n}
	{\t}{\t}{\t}if(null != results) {{{\n}
	{\t}{\t}{\t}{\t}return(results);{\n}
	{\t}{\t}{\t}}{\n}
	{\t}{\t}}{\n}{\n}
{endif}

{\t}{\t}PreparedStatement preparedStatement = null;{\n}
{\t}{\t}ResultSet resultSet = null;{\n}
{\t}{\t}Connection connection = null;{\n}
{\t}{\t}List<{table.javaClassName}> results = new ArrayList<{table.javaClassName}>();{\n}
{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}
{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_SELECT_START);{\n}
{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
{\t}{\t}{\t}results = list(resultSet);{\n}
{\t}{\t}} catch(SQLException sqlex) {{{\n}
{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findAll(): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}
{\t}{\t}{\t}throw sqlex;{\n}
{\t}{\t}} finally {{{\n}
{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
{\t}{\t}}{\n}
{\n}
{if table.cacheFindAll}
	{\t}{\t}refreshCache("findAll", results);{\n}
{endif}

{\t}{\t}return(results);{\n}
{\t}}{\n}
{\n}

{\t}public static List<{table.javaClassName}> findAll() throws SQLException {{{\n}
{\t}{\t}return(findAll(null, null));{\n}
{\t}}{\n}

{\t}public static List<{table.javaClassName}> findAllSilent() {{{\n}
{\t}{\t}try {{{\n}
{\t}{\t}{\t}return(findAll());{\n}
{\t}{\t}} catch(SQLException sqlex){{{\n}

{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.warn("SQLException findAllSilent(): " + sqlex.getMessage());{\n}

{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
{\t}{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}}{\n}

{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}>());{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				AND THE ACTUAL FINDERS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if fn:null[finder.selectClause]}
		{\t}public static 
		{if finder.unique}{table.javaClassName} {else}List<{table.javaClassName}> {endif}
		{finder.name}(

		{loop finder.uniqueWhereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaType} {whereField.javaName}
		{endloop}
		) throws H2ZeroFinderException, SQLException {{{\n}
		{if finder.cache}
			{\t}{\t}if(!shouldRefresh("{finder.name}")){{{\n}
			{\t}{\t}{\t}return(getCachedResults("{finder.name}"));{\n}
			{\t}{\t}}{\n}
		{endif}

		{\t}{\t}Connection connection = null;{\n}
		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{if finder.unique}
			{\t}{\t}{table.javaClassName} result = null;{\n}
		{else}
			{\t}{\t}List<{table.javaClassName}> results = null;{\n}
		{endif}
		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}

		{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}

			{loop finder.whereFields as whereField}
				{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
			{endloop}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}result = uniqueResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}results = list(resultSet);{\n}

				{if finder.cache}
					{\t}{\t}{\t}refreshCache("findByOrderedPlanAmount", results);{\n}
				{endif}
	
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were " 
			{loop finder.uniqueWhereFields as whereField}
				 + "[{whereField.javaName}:" + {whereField.javaName} + "]{if !whereFieldStatus.last}, {else}.{endif}"
			{endloop});{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\n}
		{\t}{\t}if(null == result{if !finder.unique}s{endif}) {{{\n}
		{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result.");{\n}
		{\t}{\t}}{\n}
		{\t}{\t}return(result{if !finder.unique}s{endif});{\n}
		{\t}}{\n}
	{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName} {else}List<{table.javaClassName}> {endif}
		{finder.name}(Connection connection

		{loop finder.uniqueWhereFields as whereField}
			, {whereField.javaType} {whereField.javaName}
		{endloop}
		) throws H2ZeroFinderException, SQLException {{{\n}
		{if finder.cache}
			{\t}{\t}if(!shouldRefresh("{finder.name}")){{{\n}
			{\t}{\t}{\t}return(getCachedResults("{finder.name}"));{\n}
			{\t}{\t}}{\n}
		{endif}

		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{if finder.unique}
			{\t}{\t}{table.javaClassName} result = null;{\n}
		{else}
			{\t}{\t}List<{table.javaClassName}> results = null;{\n}
		{endif}
		{\t}{\t}try {{{\n}

		{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}

			{loop finder.whereFields as whereField}
				{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
			{endloop}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}result = uniqueResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}results = list(resultSet);{\n}

				{if finder.cache}
					{\t}{\t}{\t}refreshCache("findByOrderedPlanAmount", results);{\n}
				{endif}
	
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw new H2ZeroFinderException(h2zfex.getMessage() + "  Additionally, the parameters were " 
			{loop finder.uniqueWhereFields as whereField}
				 + "[{whereField.javaName}:" + {whereField.javaName} + "]{if !whereFieldStatus.last}, {else}.{endif}"
			{endloop});{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\n}
		{\t}{\t}if(null == result{if !finder.unique}s{endif}) {{{\n}
		{\t}{\t}{\t}throw new H2ZeroFinderException("Could not find result.");{\n}
		{\t}{\t}}{\n}
		{\t}{\t}return(result{if !finder.unique}s{endif});{\n}
		{\t}}{\n}
	{\n}

		{\t}public static 
		{if finder.unique}{table.javaClassName} {else}List<{table.javaClassName}> {endif}
		{finder.name}Silent(

		{loop finder.uniqueWhereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaType} {whereField.javaName}
		{endloop}
		) {{{\n}

		{if finder.unique}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}({loop finder.uniqueWhereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaName}
		{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(
			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}}{\n}
		{else}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}({loop finder.uniqueWhereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaName}
		{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}>());{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}>());{\n}
			{\t}{\t}}{\n}
		{endif}
		{\t}}{\n}
	{\n}


		{\t}public static 
		{if finder.unique}{table.javaClassName} {else}List<{table.javaClassName}> {endif}
		{finder.name}Silent(Connection connection

		{loop finder.uniqueWhereFields as whereField}
			, {whereField.javaType} {whereField.javaName}
		{endloop}
		) {{{\n}

		{if finder.unique}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}(connection{loop finder.uniqueWhereFields as whereField}
			, {whereField.javaName}
		{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(
			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}}{\n}
		{else}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}({loop finder.uniqueWhereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaName}
		{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}>());{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.uniqueWhereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{table.javaClassName}>());{\n}
			{\t}{\t}}{\n}
		{endif}
		{\t}}{\n}
	{\n}
	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				AND THE SELECT CLAUSE FINDERS
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if fn:notNull[finder.selectClause]}
		{\t}public static 
		{if finder.unique}{finder.finderTagName}Bean {else}List<{finder.finderTagName}Bean> {endif}
		{finder.name}(

		{loop finder.whereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{if whereField.isInField}List<{whereField.javaType}>{else}{whereField.javaType}{endif} {whereField.javaName}{if whereField.isInField}List{endif}
		{endloop}
		) throws H2ZeroFinderException, SQLException {{{\n}
		{if finder.cache}
			{\t}{\t}if(!shouldRefresh("{finder.name}")){{{\n}
			{\t}{\t}{\t}return(getCachedResults("{finder.name}"));{\n}
			{\t}{\t}}{\n}
		{endif}

		{\t}{\t}Connection connection = null;{\n}
		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{\t}{\t}try {{{\n}
		{\t}{\t}{\t}connection = ConnectionManager.getConnection();{\n}


		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}));{\n}
			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}


			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}{finder.finderTagName}Bean result = unique{finder.finderTagName}BeanResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
				{\t}{\t}{\t}return(result);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}List<{finder.finderTagName}Bean> results = list{finder.finderTagName}Bean(resultSet);{\n}

				{if finder.cache}
					{\t}{\t}{\t}refreshCache("findByOrderedPlanAmount", results);{\n}
				{endif}
	
				{\t}{\t}{\t}return(results);{\n}
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw h2zfex;{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement, connection);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}}{\n}
	{\n}



		{\t}public static 
		{if finder.unique}{finder.finderTagName}Bean {else}List<{finder.finderTagName}Bean> {endif}
		{finder.name}(Connection connection

		{loop finder.whereFields as whereField}
			, {if whereField.isInField}List<{whereField.javaType}>{else}{whereField.javaType}{endif} {whereField.javaName}{if whereField.isInField}List{endif}
		{endloop}
		) throws H2ZeroFinderException, SQLException {{{\n}
		{if finder.cache}
			{\t}{\t}if(!shouldRefresh("{finder.name}")){{{\n}
			{\t}{\t}{\t}return(getCachedResults("{finder.name}"));{\n}
			{\t}{\t}}{\n}
		{endif}

		{\t}{\t}PreparedStatement preparedStatement = null;{\n}
		{\t}{\t}ResultSet resultSet = null;{\n}

		{\t}{\t}try {{{\n}

		{if finder.hasInFields}
			{\t}{\t}{\t}if({finder.name}_statement_cache.containsKey({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop})) {{{\n}

			{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement({finder.name}_statement_cache.get(
			{loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}));{\n}
			{\t}{\t}{\t}} else {{{\n}

			{\t}{\t}{\t}{\t}String preparedStatementTemp = SQL_{finder.staticName};{\n}
			{\t}{\t}{\t}{\t}StringBuilder stringBuilder = null;{\n}
			{loop finder.whereFields as whereField}
				{if whereField.isInField}
					{\t}{\t}{\t}{\t}stringBuilder = new StringBuilder();{\n}
					{\t}{\t}{\t}{\t}for(int i = 0; i < {whereField.javaName}List.size(); i++) {{{\n}
					{\t}{\t}{\t}{\t}{\t}if(i > 0) {{{\n}
					{\t}{\t}{\t}{\t}{\t}{\t}stringBuilder.append(", ");{\n}
					{\t}{\t}{\t}{\t}{\t}}{\n}
					{\t}{\t}{\t}{\t}{\t}stringBuilder.append("?");{\n}
					{\t}{\t}{\t}{\t}}{\n}

					{\t}{\t}{\t}{\t}preparedStatementTemp = SQL_{finder.staticName}.replaceFirst("\\.\\.\\.", stringBuilder.toString());{\n}
				{endif}
			{endloop}
				{\t}{\t}{\t}{\t}{finder.name}_statement_cache.put({loop finder.inWhereFields as whereField}
				{whereField.javaName}List.size() + ":" {if !whereFieldStatus.last} + {endif}
			{endloop}, preparedStatementTemp);{\n}
				{\t}{\t}{\t}{\t}preparedStatement = connection.prepareStatement(preparedStatementTemp);{\n}
			{\t}{\t}{\t}}{\n}
		{else}
			{\t}{\t}{\t}preparedStatement = connection.prepareStatement(SQL_{finder.staticName});{\n}
		{endif}


			{if finder.hasInFields}
				{\t}{\t}{\t}int i = 1;{\n}
				{loop finder.whereFields as whereField}
					{if whereField.isInField}
						{\t}{\t}{\t}for ({whereField.javaType} {whereField.javaName}In : {whereField.javaName}List) {{{\n}
						{\t}{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName}In);{\n}
						{\t}{\t}{\t}{\t}i++;{\n}
						{\t}{\t}{\t}}{\n}

					{else}
						{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, i, {whereField.javaName});{\n}
						{\t}{\t}{\t}i++;{\n}
					{endif}
				{endloop}
			{else}
				{loop finder.whereFields as whereField}
					{\t}{\t}{\t}ConnectionManager.set{whereField.upperType}(preparedStatement, {whereFieldStatus.index}, {whereField.javaName});{\n}
				{endloop}
			{endif}

			{\n}
			{if finder.unique}
				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}{finder.finderTagName}Bean result = unique{finder.finderTagName}BeanResult(resultSet);{\n}
				{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
				{\t}{\t}{\t}return(result);{\n}
			{else}

				{\t}{\t}{\t}resultSet = preparedStatement.executeQuery();{\n}
				{\t}{\t}{\t}List<{finder.finderTagName}Bean> results = list{finder.finderTagName}Bean(resultSet);{\n}

				{if finder.cache}
					{\t}{\t}{\t}refreshCache("findByOrderedPlanAmount", results);{\n}
				{endif}
	
				{\t}{\t}{\t}return(results);{\n}
			{endif}
		{\t}{\t}} catch (SQLException sqlex) {{{\n}
		{\t}{\t}{\t}throw sqlex;{\n}

		{if finder.unique}
			{\t}{\t}} catch (H2ZeroFinderException h2zfex) {{{\n}
			{\t}{\t}{\t}throw h2zfex;{\n}
		{endif}

		{\t}{\t}} finally {{{\n}
		{\t}{\t}{\t}ConnectionManager.closeAll(resultSet, preparedStatement);{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}}{\n}
	{\n}



		{\t}public static 
		{if finder.unique}{finder.finderTagName}Bean {else}List<{finder.finderTagName}Bean> {endif}
		{finder.name}Silent(

		{loop finder.whereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{if whereField.isInField}List<{whereField.javaType}>{else}{whereField.javaType}{endif} {whereField.javaName}{if whereField.isInField}List{endif}{endloop}
		) {{{\n}

		{if finder.unique}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}({loop finder.whereFields as whereField}
			{if !whereFieldStatus.first}, {endif} {whereField.javaName}{if whereField.isInField}List{endif}{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif} {whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}}{\n}
		{else}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}({loop finder.whereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaName}{if whereField.isInField}List{endif}
		{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.finderTagName}Bean>());{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.finderTagName}Bean>());{\n}
			{\t}{\t}}{\n}
		{endif}
		{\t}}{\n}
	{\n}



		{\t}public static 
		{if finder.unique}{finder.finderTagName}Bean {else}List<{finder.finderTagName}Bean> {endif}
		{finder.name}Silent(Connection connection

		{loop finder.whereFields as whereField}
			, {if whereField.isInField}List<{whereField.javaType}>{else}{whereField.javaType}{endif} {whereField.javaName}{if whereField.isInField}List{endif}{endloop}
		) {{{\n}

		{if finder.unique}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}(connection {loop finder.whereFields as whereField}
			, {whereField.javaName}{if whereField.isInField}List{endif}{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif} {whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(null);{\n}
			{\t}}{\n}
		{else}
			{\t}{\t}try {{{\n}
			{\t}{\t}{\t}return({finder.name}({loop finder.whereFields as whereField}
			{if !whereFieldStatus.first}, {endif}{whereField.javaName}{if whereField.isInField}List{endif}
		{endloop}));{\n}
			{\t}{\t}} catch(H2ZeroFinderException h2zfex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("H2ZeroFinderException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + h2zfex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}h2zfex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.finderTagName}Bean>());{\n}
			{\t}{\t}} catch(SQLException sqlex) {{{\n}

			{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.WARN)) {{{\n}
			{\t}{\t}{\t}{\t}LOGGER.warn("SQLException {finder.name}Silent(

			{loop finder.whereFields as whereField}
				{if whereFieldStatus.first}" + {endif}
				{if !whereFieldStatus.first} + ", " + {endif}{whereField.javaName}{if whereField.isInField}List{endif}
				{if whereFieldStatus.last} + "{endif}
			{endloop}

			): " + sqlex.getMessage());{\n}

			{\t}{\t}{\t}{\t}if(LOGGER.isEnabledFor(Level.DEBUG)) {{{\n}
			{\t}{\t}{\t}{\t}{\t}sqlex.printStackTrace();{\n}
			{\t}{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}}{\n}

			{\t}{\t}{\t}return(new ArrayList<{finder.finderTagName}Bean>());{\n}
			{\t}{\t}}{\n}
		{endif}
		{\t}}{\n}
	{\n}

	{endif}
{endloop}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE BEAN CREATOR
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{\t}/**{\n}
{\t} * Return a unique result for the query - in effect just the first result of{\n}
{\t} * query.{\n}
{\t} * {\n}
{\t} * @param resultSet The result set of the query{\n}
{\t} * {\n}
{\t} * @return The {table.javaClassName} that represents this result{\n}
{\t} * {\n}
{\t} * @throws H2ZeroFinderException if no results were found{\n}
{\t} * @throws SQLException if there was a problem retrieving the results{\n}
{\t} */{\n}

{\t}private static {table.javaClassName} uniqueResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {{{\n}
{\t}{\t}if(resultSet.first()) {{{\n}
{\t}{\t}{\t}// we have a result{\n}
{loop table.fields as field}
	{\t}{\t}{\t}{field.javaType} {field.javaName} = resultSet.get{field.sqlJavaType}({fieldStatus.index});{\n}
		{if field.nullable}
			{\t}{\t}{\t}if(resultSet.wasNull()) {{{\n}
			{\t}{\t}{\t}{\t}{field.javaName} = null;{\n}
			{\t}{\t}{\t}}{\n}
		{endif}
{endloop}
{\n}
{\t}{\t}{\t}{table.javaClassName} {table.javaFieldName} = new {table.javaClassName}({loop table.fields as field}
{field.javaName}{if !fieldStatus.last}, {endif}
{endloop});{\n}
{\n}
{\t}{\t}{\t}if(resultSet.next()) {{{\n}
{\t}{\t}{\t}{\t}throw new H2ZeroFinderException("More than one result in resultset for unique finder.");{\n}
{\t}{\t}{\t}} else {{{\n}
{\t}{\t}{\t}{\t}return({table.javaFieldName});{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}// could not get a result;{\n}
{\t}{\t}{\t}return(null);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Return the results as a list of {table.javaClassName}, this will be empty if{\n}
{\t} * none are found.{\n}
{\t} * {\n}
{\t} * @param resultSet the results as a list of {table.javaClassName}{\n}
{\t} * {\n}
{\t} * @return the list of results{\n}
{\t} * {\n}
{\t} * @throws SQLException if there was a problem retrieving the results{\n}
{\t} */{\n}

{\t}private static List<{table.javaClassName}> list(ResultSet resultSet) throws SQLException {{{\n}
{\t}{\t}List<{table.javaClassName}> arrayList = new ArrayList<{table.javaClassName}>();{\n}
{\t}{\t}while(resultSet.next()) {{{\n}

{\t}{\t}{\t}arrayList.add(new {table.javaClassName}({\n}

{loop table.fields as field}
	{\t}{\t}{\t}{\t}{\t}resultSet.get{field.sqlJavaType}({fieldStatus.index})
	{if !fieldStatus.last},{\n}{endif}
{endloop}
));{\n}

{\t}{\t}}{\n}
{\t}{\t}return(arrayList);{\n}
{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				THE SELECT CLAUSE BEAN CREATOR
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{loop table.finders as finder}
	{if fn:notNull[finder.selectClause]}
		{if finder.unique}
			{\t}/**{\n}
			{\t} * Return a unique result for the {finder.name} query - in effect just the first result of{\n}
			{\t} * query.{\n}
			{\t} * {\n}
			{\t} * @param resultSet The result set of the query{\n}
			{\t} * {\n}
			{\t} * @return The {finder.finderTagName}Beans that represents this result{\n}
			{\t} * {\n}
			{\t} * @throws H2ZeroFinderException if no results were found{\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static {finder.finderTagName}Bean unique{finder.finderTagName}BeanResult(ResultSet resultSet) throws H2ZeroFinderException, SQLException {{{\n}
			{\t}{\t}if(resultSet.first()) {{{\n}
			{\t}{\t}{\t}// we have a result{\n}

			{\t}{\t}{\t}return(new {finder.finderTagName}Bean({\n}
			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}} else {{{\n}
			{\t}{\t}{\t}// could not get any results{\n}
			{\t}{\t}{\t}return(null);{\n}
			{\t}{\t}}{\n}
			{\t}}{\n}
			{\n}

		{else}

			{\t}/**{\n}
			{\t} * Return the results as a list of {finder.finderTagName}Beans, this will be empty if{\n}
			{\t} * none are found.{\n}
			{\t} * {\n}
			{\t} * @param resultSet the results as a list of {finder.finderTagName}Bean{\n}
			{\t} * {\n}
			{\t} * @return the list of results{\n}
			{\t} * {\n}
			{\t} * @throws SQLException if there was a problem retrieving the results{\n}
			{\t} */{\n}

			{\t}private static List<{finder.finderTagName}Bean> list{finder.finderTagName}Bean(ResultSet resultSet) throws SQLException {{{\n}
			{\t}{\t}List<{finder.finderTagName}Bean> arrayList = new ArrayList<{finder.finderTagName}Bean>();{\n}
			{\t}{\t}while(resultSet.next()) {{{\n}

			{\t}{\t}{\t}arrayList.add(new {finder.finderTagName}Bean({\n}

			{loop finder.selectFields as selectField}
				{\t}{\t}{\t}{\t}{\t}resultSet.get{selectField.sqlJavaType}({selectFieldStatus.index})
				{if !selectFieldStatus.last},{\n}{endif}
			{endloop}
			));{\n}

			{\t}{\t}}{\n}
			{\t}{\t}return(arrayList);{\n}
			{\t}}{\n}
			{\n}
		{endif}
	{endif}
{endloop}
{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
			Is this cacheable?
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

{if table.cacheable}
{\t}/**{\n}
{\t} * Return whether this finder name should be refreshed{\n}
{\t} *{\n}
{\t} * @param finderName The name of the finder{\n}
{\t} *{\n}
{\t} * @return whether this cache needs a refresh{\n}
{\t} */{\n}
{\t}public static boolean shouldRefresh(String finderName) {{{\n}
{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}LOGGER.debug("Should refresh individual cache for finder '" + finderName + "': '" + SHOULD_REFRESH_CACHE.containsKey(finderName) + "'.");{\n}
{\t}{\t}}{\n}
{\t}{\t}return(SHOULD_REFRESH_CACHE.containsKey(finderName));{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Get the cached results for a specific finder{\n}
{\t} *{\n}
{\t} * @param finderName the name of the finder to get the results for{\n}
{\t} *{\n}
{\t} * @return the cached results, or null if not available{\n}
{\t} */{\n}
{\t}public static List<{table.javaClassName}> getCachedResults(String finderName) {{{\n}
{\t}{\t}return(CACHE.get(finderName));{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Refresh the cache with a list of variables{\n}
{\t} *{\n}
{\t} * @param finderName the name of the finder{\n}
{\t} *{\n}
{\t} * @param results the results to set in the cache{\n}
{\t} */{\n}
{\t}public synchronized static void refreshCache(String finderName, List<{table.javaClassName}> results) {{{\n}
{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}LOGGER.debug("Attempting to refresh cache for finder '" + finderName + "', with results: " + results);{\n}
{\t}{\t}}{\n}
{\t}{\t}SHOULD_REFRESH_CACHE.remove(finderName);{\n}
{\t}{\t}CACHE.put(finderName, results);{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Mark all caches as ready for refresh.{\n}
{\t} */{\n}
{\t}public static void markRefreshAllCaches() {{{\n}
{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}LOGGER.debug("Marking all caches as ready for refresh.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}Enumeration<String> finderNames = CACHE.keys();{\n}
{\t}{\t}while (finderNames.hasMoreElements()) {{{\n}
{\t}{\t}{\t}String finderName = finderNames.nextElement();{\n}
{\t}{\t}{\t}markCacheShouldBeRefreshed(finderName);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Mark an individual finder cache as ready for refresh{\n}
{\t} *{\n}
{\t} * @param finderName the name of the finder method to refresh{\n}
{\t} */{\n}
{\t}private static void markCacheShouldBeRefreshed(String finderName) {{{\n}
{\t}{\t}if(!SHOULD_REFRESH_CACHE.containsKey(finderName)) {{{\n}
{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.debug("Marking cache for finder '" + finderName + "' ready for refresh.");{\n}
{\t}{\t}{\t}}{\n}
{\n}
{\t}{\t}{\t}SHOULD_REFRESH_CACHE.put(finderName, true);{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.debug("Cache for finder '" + finderName + "' already marked for refresh.");{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}
{endif}
}
