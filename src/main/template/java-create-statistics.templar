{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
		PACKAGE DECLARATION, IMPORT STATEMENTS AND CLASS DEFINITION
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --}

package {database.package}.model.util;{\n}{\n}
// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}
//            (java-create-statistics.templar){\n}{\n}

public class Statistics {{{\n}
	{set fn:length[database.tables] as xSize}
	{\t}private static final int MAX_TABLE = {xSize};{\n}
	{\t}private static final int MAX_FIELD = {database.maxNumFields};{\n}

	{\t}// holder arrays for the cache hits and misses and whether this is auto-populate{\n}
	{\t}private static long[][] FIELD_HITS = new long[{xSize}][{database.maxNumFields}];{\n}
	{\t}private static long[][] FIELD_MISSES = new long[{xSize}][{database.maxNumFields}];{\n}
	{\t}private static boolean[][] FIELD_AUTO_POPULATE = new boolean[{xSize}][{database.maxNumFields}];{\n}
	{\n}
	
	{loop database.tables as table}
		{\t}public static final int {table.upperName} = {tableStatus.offset};{\n}
		{loop table.fields as field}
			{\t}public static final int {table.upperName}_{field.upperName} = {fieldStatus.offset};{\n}
		{endloop}{\n}{\n}
	{endloop}
	
	{\t}static {{{\n}
	{loop database.tables as table}
		{loop table.fields as field}
			{\t}{\t}FIELD_AUTO_POPULATE[{tableStatus.offset}][{fieldStatus.offset}] = {field.populate};{\n}
		{endloop}
	{endloop}
	{\t}}{\n}
	{\n}

	{\t}public static void cacheHit(int table, int field) {{{\n}
		{\t}{\t}if(table > MAX_TABLE || field > MAX_FIELD) {{{\n}
			{\t}{\t}{\t}// do nothing{\n}
			{\t}{\t}{\t}return;{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}{\t}FIELD_HITS[table][field]++;{\n}
	{\t}}{\n}
	{\n}

	{\t}public static void cacheMiss(int table, int field) {{{\n}
		{\t}{\t}if(table > MAX_TABLE || field > MAX_FIELD) {{{\n}
			{\t}{\t}{\t}// do nothing{\n}
			{\t}{\t}{\t}return;{\n}
		{\t}{\t}}{\n}
		{\n}
		{\t}{\t}FIELD_MISSES[table][field]++;{\n}
	{\t}}{\n}
	{\n}

	{\t}public static String toDataString() {{{\n}
	{\t}{\t}StringBuilder stringBuilder = new StringBuilder();{\n}
	{\t}{\t}for (int i = 0; i < MAX_TABLE; i++) {{{\n}
	{\t}{\t}{\t}stringBuilder.append("[ ");{\n}
	{\t}{\t}{\t}for (int j = 0; j < MAX_FIELD; j++) {{{\n}
	{\t}{\t}{\t}{\t}if(FIELD_AUTO_POPULATE[i][j]) {{{\n}
	{\t}{\t}{\t}{\t}{\t}stringBuilder.append("T:");{\n}
	{\t}{\t}{\t}{\t}} else {{{\n}
	{\t}{\t}{\t}{\t}{\t}stringBuilder.append("F:");{\n}
	{\t}{\t}{\t}{\t}}{\n}
	{\n}
	{\t}{\t}{\t}{\t}stringBuilder.append(FIELD_HITS[i][j]);{\n}
	{\t}{\t}{\t}{\t}stringBuilder.append("/");{\n}
	{\t}{\t}{\t}{\t}stringBuilder.append(FIELD_MISSES[i][j]);{\n}
	{\n}
	{\t}{\t}{\t}{\t}stringBuilder.append("(");{\n}
	{\t}{\t}{\t}{\t}if(FIELD_HITS[i][j] + FIELD_MISSES[i][j] == 0) {{{\n}
	{\t}{\t}{\t}{\t}{\t}stringBuilder.append("0");{\n}
	{\t}{\t}{\t}{\t}} else {{{\n}
	{\t}{\t}{\t}{\t}{\t}stringBuilder.append((int)(FIELD_HITS[i][j]/(FIELD_HITS[i][j] + FIELD_MISSES[i][j]) * 100));{\n}
	{\t}{\t}{\t}{\t}}{\n}
	{\t}{\t}{\t}{\t}stringBuilder.append("%)");{\n}
	{\t}{\t}{\t}}{\n}
	{\t}{\t}{\t}stringBuilder.append("]\n");{\n}
	{\t}{\t}}{\n}
	{\t}{\t}return(stringBuilder.toString());{\n}
	{\t}}{\n}
		

}