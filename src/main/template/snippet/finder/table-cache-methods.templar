{\t}/**{\n}
{\t} * Return whether this finder name should be refreshed{\n}
{\t} *{\n}
{\t} * @param finderName The name of the finder{\n}
{\t} *{\n}
{\t} * @return whether this cache needs a refresh{\n}
{\t} */{\n}
{\t}public static boolean shouldRefresh(String finderName) {{{\n}
{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}LOGGER.debug("Should refresh individual cache for finder '" + finderName + "': '" + SHOULD_REFRESH_CACHE.containsKey(finderName) + "'.");{\n}
{\t}{\t}}{\n}
{\t}{\t}return(SHOULD_REFRESH_CACHE.containsKey(finderName));{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Get the cached results for a specific finder{\n}
{\t} *{\n}
{\t} * @param finderName the name of the finder to get the results for{\n}
{\t} *{\n}
{\t} * @return the cached results, or null if not available{\n}
{\t} */{\n}
{\t}public static List<{table.javaClassName}> getCachedResults(String finderName) {{{\n}
{\t}{\t}return(CACHE.get(finderName));{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Refresh the cache with a list of variables{\n}
{\t} *{\n}
{\t} * @param finderName the name of the finder{\n}
{\t} *{\n}
{\t} * @param results the results to set in the cache{\n}
{\t} */{\n}
{\t}public synchronized static void refreshCache(String finderName, List<{table.javaClassName}> results) {{{\n}
{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}LOGGER.debug("Attempting to refresh cache for finder '" + finderName + "', with results: " + results);{\n}
{\t}{\t}}{\n}
{\t}{\t}SHOULD_REFRESH_CACHE.remove(finderName);{\n}
{\t}{\t}CACHE.put(finderName, results);{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Mark all caches as ready for refresh.{\n}
{\t} */{\n}
{\t}public static void markRefreshAllCaches() {{{\n}
{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}LOGGER.debug("Marking all caches as ready for refresh.");{\n}
{\t}{\t}}{\n}
{\n}
{\t}{\t}Enumeration<String> finderNames = CACHE.keys();{\n}
{\t}{\t}while (finderNames.hasMoreElements()) {{{\n}
{\t}{\t}{\t}String finderName = finderNames.nextElement();{\n}
{\t}{\t}{\t}markCacheShouldBeRefreshed(finderName);{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}

{\t}/**{\n}
{\t} * Mark an individual finder cache as ready for refresh{\n}
{\t} *{\n}
{\t} * @param finderName the name of the finder method to refresh{\n}
{\t} */{\n}
{\t}private static void markCacheShouldBeRefreshed(String finderName) {{{\n}
{\t}{\t}if(!SHOULD_REFRESH_CACHE.containsKey(finderName)) {{{\n}
{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.debug("Marking cache for finder '" + finderName + "' ready for refresh.");{\n}
{\t}{\t}{\t}}{\n}
{\n}
{\t}{\t}{\t}SHOULD_REFRESH_CACHE.put(finderName, true);{\n}
{\t}{\t}} else {{{\n}
{\t}{\t}{\t}if(LOGGER.isDebugEnabled()) {{{\n}
{\t}{\t}{\t}{\t}LOGGER.debug("Cache for finder '" + finderName + "' already marked for refresh.");{\n}
{\t}{\t}{\t}}{\n}
{\t}{\t}}{\n}
{\t}}{\n}
{\n}