package {database.package}.view;{\n}{\n}

// - - - - thoughtfully generated by synapticloop h2zero - - - - {\n}
//    with the use of synapticloop templar templating language{\n}{\n}
//              (java-create-view-model.templar){\n}{\n}

import synapticloop.h2zero.base.view.ViewBase;{\n}

import java.sql.Date;{\n}
import java.sql.Timestamp;{\n}
import {database.package}.model.util.Constants;{\n}

{\n}{\n}

public class {view.javaClassName} extends ViewBase {{{\n}
{\t}// the binder is unused in code, but will generate compile problems if this {\n}
{\t}// class is no longer referenced in the h2zero file. Just a nicety for{\n}
{\t}// removing dead code{\n}
{\t}@SuppressWarnings("unused"){\n}
{\t}private static final String BINDER = Constants.{view.upperName}_binder;{\n}{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				LIST ALL OF THE JAVA FIELDS
}

{loop view.fields as field}
	{\t}private {field.javaType} {field.javaName} = null;{\n}
{endloop}
{\n}


{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				CONSTRUCTORS
			what about null-able fields?
}

{\t}public {view.javaClassName}(
	{loop view.fields as field}
		{field.javaType} {field.javaName}
		{if fieldStatus.last}{else}, {endif}
	{endloop}
) {{{\n}
	{loop view.fields as field}
		{\t}{\t}this.{field.javaName} = {field.javaName};{\n}
	{endloop}

{\t}}{\n}
{\n}

{-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
				GETTERS ONLY
}
{\t}/*{\n}
{\t} * Boring ol' getters{\n}
{\t} */{\n}
{\n}

{loop view.fields as field}
	{\t}public {field.javaType} get{field.javaAccessorName}() {{ return(this.{field.javaName}); }{\n}{\n}
{endloop}
}
